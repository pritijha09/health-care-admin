import { AfterContentInit, ChangeDetectorRef, EventEmitter, OnInit } from '@angular/core';
import { DateTimeAdapter } from './adapter/date-time-adapter.class';
import { CalendarCell, OwlCalendarBodyComponent } from './calendar-body.component';
import { SelectMode } from './date-time.class';
import { OwlDateTimeIntl } from './date-time-picker-intl.service';
import * as ɵngcc0 from '@angular/core';
export declare const YEARS_PER_ROW = 3;
export declare const YEAR_ROWS = 7;
export declare class OwlMultiYearViewComponent<T> implements OnInit, AfterContentInit {
    private cdRef;
    private pickerIntl;
    private dateTimeAdapter;
    private _selectMode;
    selectMode: SelectMode;
    private _selected;
    selected: T | null;
    private _selecteds;
    selecteds: T[];
    private _pickerMoment;
    pickerMoment: T;
    private _dateFilter;
    dateFilter: (date: T) => boolean;
    private _minDate;
    minDate: T | null;
    private _maxDate;
    maxDate: T | null;
    private _todayYear;
    readonly todayYear: number;
    private _years;
    readonly years: CalendarCell[][];
    private _selectedYears;
    readonly selectedYears: number[];
    private initiated;
    readonly isInSingleMode: boolean;
    readonly isInRangeMode: boolean;
    readonly activeCell: number;
    readonly tableHeader: string;
    readonly prevButtonLabel: string;
    readonly nextButtonLabel: string;
    readonly change: EventEmitter<T>;
    readonly yearSelected: EventEmitter<T>;
    readonly pickerMomentChange: EventEmitter<T>;
    readonly keyboardEnter: EventEmitter<any>;
    calendarBodyElm: OwlCalendarBodyComponent;
    readonly owlDTCalendarView: boolean;
    readonly owlDTCalendarMultiYearView: boolean;
    constructor(cdRef: ChangeDetectorRef, pickerIntl: OwlDateTimeIntl, dateTimeAdapter: DateTimeAdapter<T>);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    selectCalendarCell(cell: CalendarCell): void;
    private selectYear;
    prevYearList(event: any): void;
    nextYearList(event: any): void;
    generateYearList(): void;
    previousEnabled(): boolean;
    nextEnabled(): boolean;
    handleCalendarKeydown(event: KeyboardEvent): void;
    private createYearCell;
    private setSelectedYears;
    private isYearEnabled;
    private isSameYearList;
    private getValidDate;
    private focusActiveCell;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlMultiYearViewComponent<any>, [null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<OwlMultiYearViewComponent<any>, "owl-date-time-multi-year-view", never, { "selectMode": "selectMode"; "selected": "selected"; "selecteds": "selecteds"; "pickerMoment": "pickerMoment"; "dateFilter": "dateFilter"; "minDate": "minDate"; "maxDate": "maxDate"; }, { "change": "change"; "yearSelected": "yearSelected"; "pickerMomentChange": "pickerMomentChange"; "keyboardEnter": "keyboardEnter"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItbXVsdGkteWVhci12aWV3LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjYWxlbmRhci1tdWx0aS15ZWFyLXZpZXcuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRlVGltZUFkYXB0ZXIgfSBmcm9tICcuL2FkYXB0ZXIvZGF0ZS10aW1lLWFkYXB0ZXIuY2xhc3MnO1xuaW1wb3J0IHsgQ2FsZW5kYXJDZWxsLCBPd2xDYWxlbmRhckJvZHlDb21wb25lbnQgfSBmcm9tICcuL2NhbGVuZGFyLWJvZHkuY29tcG9uZW50JztcbmltcG9ydCB7IFNlbGVjdE1vZGUgfSBmcm9tICcuL2RhdGUtdGltZS5jbGFzcyc7XG5pbXBvcnQgeyBPd2xEYXRlVGltZUludGwgfSBmcm9tICcuL2RhdGUtdGltZS1waWNrZXItaW50bC5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFlFQVJTX1BFUl9ST1cgPSAzO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgWUVBUl9ST1dTID0gNztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE93bE11bHRpWWVhclZpZXdDb21wb25lbnQ8VD4gaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQge1xuICAgIHByaXZhdGUgY2RSZWY7XG4gICAgcHJpdmF0ZSBwaWNrZXJJbnRsO1xuICAgIHByaXZhdGUgZGF0ZVRpbWVBZGFwdGVyO1xuICAgIHByaXZhdGUgX3NlbGVjdE1vZGU7XG4gICAgc2VsZWN0TW9kZTogU2VsZWN0TW9kZTtcbiAgICBwcml2YXRlIF9zZWxlY3RlZDtcbiAgICBzZWxlY3RlZDogVCB8IG51bGw7XG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWRzO1xuICAgIHNlbGVjdGVkczogVFtdO1xuICAgIHByaXZhdGUgX3BpY2tlck1vbWVudDtcbiAgICBwaWNrZXJNb21lbnQ6IFQ7XG4gICAgcHJpdmF0ZSBfZGF0ZUZpbHRlcjtcbiAgICBkYXRlRmlsdGVyOiAoZGF0ZTogVCkgPT4gYm9vbGVhbjtcbiAgICBwcml2YXRlIF9taW5EYXRlO1xuICAgIG1pbkRhdGU6IFQgfCBudWxsO1xuICAgIHByaXZhdGUgX21heERhdGU7XG4gICAgbWF4RGF0ZTogVCB8IG51bGw7XG4gICAgcHJpdmF0ZSBfdG9kYXlZZWFyO1xuICAgIHJlYWRvbmx5IHRvZGF5WWVhcjogbnVtYmVyO1xuICAgIHByaXZhdGUgX3llYXJzO1xuICAgIHJlYWRvbmx5IHllYXJzOiBDYWxlbmRhckNlbGxbXVtdO1xuICAgIHByaXZhdGUgX3NlbGVjdGVkWWVhcnM7XG4gICAgcmVhZG9ubHkgc2VsZWN0ZWRZZWFyczogbnVtYmVyW107XG4gICAgcHJpdmF0ZSBpbml0aWF0ZWQ7XG4gICAgcmVhZG9ubHkgaXNJblNpbmdsZU1vZGU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNJblJhbmdlTW9kZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBhY3RpdmVDZWxsOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgdGFibGVIZWFkZXI6IHN0cmluZztcbiAgICByZWFkb25seSBwcmV2QnV0dG9uTGFiZWw6IHN0cmluZztcbiAgICByZWFkb25seSBuZXh0QnV0dG9uTGFiZWw6IHN0cmluZztcbiAgICByZWFkb25seSBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxUPjtcbiAgICByZWFkb25seSB5ZWFyU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxUPjtcbiAgICByZWFkb25seSBwaWNrZXJNb21lbnRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxUPjtcbiAgICByZWFkb25seSBrZXlib2FyZEVudGVyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjYWxlbmRhckJvZHlFbG06IE93bENhbGVuZGFyQm9keUNvbXBvbmVudDtcbiAgICByZWFkb25seSBvd2xEVENhbGVuZGFyVmlldzogYm9vbGVhbjtcbiAgICByZWFkb25seSBvd2xEVENhbGVuZGFyTXVsdGlZZWFyVmlldzogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihjZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHBpY2tlckludGw6IE93bERhdGVUaW1lSW50bCwgZGF0ZVRpbWVBZGFwdGVyOiBEYXRlVGltZUFkYXB0ZXI8VD4pO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgc2VsZWN0Q2FsZW5kYXJDZWxsKGNlbGw6IENhbGVuZGFyQ2VsbCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBzZWxlY3RZZWFyO1xuICAgIHByZXZZZWFyTGlzdChldmVudDogYW55KTogdm9pZDtcbiAgICBuZXh0WWVhckxpc3QoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgZ2VuZXJhdGVZZWFyTGlzdCgpOiB2b2lkO1xuICAgIHByZXZpb3VzRW5hYmxlZCgpOiBib29sZWFuO1xuICAgIG5leHRFbmFibGVkKCk6IGJvb2xlYW47XG4gICAgaGFuZGxlQ2FsZW5kYXJLZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBwcml2YXRlIGNyZWF0ZVllYXJDZWxsO1xuICAgIHByaXZhdGUgc2V0U2VsZWN0ZWRZZWFycztcbiAgICBwcml2YXRlIGlzWWVhckVuYWJsZWQ7XG4gICAgcHJpdmF0ZSBpc1NhbWVZZWFyTGlzdDtcbiAgICBwcml2YXRlIGdldFZhbGlkRGF0ZTtcbiAgICBwcml2YXRlIGZvY3VzQWN0aXZlQ2VsbDtcbn1cbiJdfQ==