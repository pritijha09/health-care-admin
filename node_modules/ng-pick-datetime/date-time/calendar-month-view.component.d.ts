import { AfterContentInit, ChangeDetectorRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { CalendarCell, OwlCalendarBodyComponent } from './calendar-body.component';
import { DateTimeAdapter } from './adapter/date-time-adapter.class';
import { OwlDateTimeFormats } from './adapter/date-time-format.class';
import { SelectMode } from './date-time.class';
import * as ɵngcc0 from '@angular/core';
export declare class OwlMonthViewComponent<T> implements OnInit, AfterContentInit, OnDestroy {
    private cdRef;
    private dateTimeAdapter;
    private dateTimeFormats;
    hideOtherMonths: boolean;
    private _firstDayOfWeek;
    firstDayOfWeek: number;
    private _selectMode;
    selectMode: SelectMode;
    private _selected;
    selected: T | null;
    private _selecteds;
    selecteds: T[];
    private _pickerMoment;
    pickerMoment: T;
    private _dateFilter;
    dateFilter: (date: T) => boolean;
    private _minDate;
    minDate: T | null;
    private _maxDate;
    maxDate: T | null;
    private _weekdays;
    readonly weekdays: {
        long: string;
        short: string;
        narrow: string;
    }[];
    private _days;
    readonly days: CalendarCell[][];
    readonly activeCell: number;
    readonly isInSingleMode: boolean;
    readonly isInRangeMode: boolean;
    private firstDateOfMonth;
    private localeSub;
    private initiated;
    private dateNames;
    todayDate: number | null;
    selectedDates: number[];
    firstRowOffset: number;
    readonly selectedChange: EventEmitter<T>;
    readonly userSelection: EventEmitter<void>;
    readonly pickerMomentChange: EventEmitter<T>;
    calendarBodyElm: OwlCalendarBodyComponent;
    readonly owlDTCalendarView: boolean;
    constructor(cdRef: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    selectCalendarCell(cell: CalendarCell): void;
    private selectDate;
    handleCalendarKeydown(event: KeyboardEvent): void;
    private generateWeekDays;
    private generateCalendar;
    private createDateCell;
    private isDateEnabled;
    private getValidDate;
    isSameMonth(dateLeft: T, dateRight: T): boolean;
    private setSelectedDates;
    private focusActiveCell;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlMonthViewComponent<any>, [null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<OwlMonthViewComponent<any>, "owl-date-time-month-view", ["owlYearView"], { "hideOtherMonths": "hideOtherMonths"; "firstDayOfWeek": "firstDayOfWeek"; "selectMode": "selectMode"; "selected": "selected"; "selecteds": "selecteds"; "pickerMoment": "pickerMoment"; "dateFilter": "dateFilter"; "minDate": "minDate"; "maxDate": "maxDate"; }, { "selectedChange": "selectedChange"; "userSelection": "userSelection"; "pickerMomentChange": "pickerMomentChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItbW9udGgtdmlldy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY2FsZW5kYXItbW9udGgtdmlldy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhbGVuZGFyQ2VsbCwgT3dsQ2FsZW5kYXJCb2R5Q29tcG9uZW50IH0gZnJvbSAnLi9jYWxlbmRhci1ib2R5LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXRlVGltZUFkYXB0ZXIgfSBmcm9tICcuL2FkYXB0ZXIvZGF0ZS10aW1lLWFkYXB0ZXIuY2xhc3MnO1xuaW1wb3J0IHsgT3dsRGF0ZVRpbWVGb3JtYXRzIH0gZnJvbSAnLi9hZGFwdGVyL2RhdGUtdGltZS1mb3JtYXQuY2xhc3MnO1xuaW1wb3J0IHsgU2VsZWN0TW9kZSB9IGZyb20gJy4vZGF0ZS10aW1lLmNsYXNzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE93bE1vbnRoVmlld0NvbXBvbmVudDxUPiBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGNkUmVmO1xuICAgIHByaXZhdGUgZGF0ZVRpbWVBZGFwdGVyO1xuICAgIHByaXZhdGUgZGF0ZVRpbWVGb3JtYXRzO1xuICAgIGhpZGVPdGhlck1vbnRoczogYm9vbGVhbjtcbiAgICBwcml2YXRlIF9maXJzdERheU9mV2VlaztcbiAgICBmaXJzdERheU9mV2VlazogbnVtYmVyO1xuICAgIHByaXZhdGUgX3NlbGVjdE1vZGU7XG4gICAgc2VsZWN0TW9kZTogU2VsZWN0TW9kZTtcbiAgICBwcml2YXRlIF9zZWxlY3RlZDtcbiAgICBzZWxlY3RlZDogVCB8IG51bGw7XG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWRzO1xuICAgIHNlbGVjdGVkczogVFtdO1xuICAgIHByaXZhdGUgX3BpY2tlck1vbWVudDtcbiAgICBwaWNrZXJNb21lbnQ6IFQ7XG4gICAgcHJpdmF0ZSBfZGF0ZUZpbHRlcjtcbiAgICBkYXRlRmlsdGVyOiAoZGF0ZTogVCkgPT4gYm9vbGVhbjtcbiAgICBwcml2YXRlIF9taW5EYXRlO1xuICAgIG1pbkRhdGU6IFQgfCBudWxsO1xuICAgIHByaXZhdGUgX21heERhdGU7XG4gICAgbWF4RGF0ZTogVCB8IG51bGw7XG4gICAgcHJpdmF0ZSBfd2Vla2RheXM7XG4gICAgcmVhZG9ubHkgd2Vla2RheXM6IHtcbiAgICAgICAgbG9uZzogc3RyaW5nO1xuICAgICAgICBzaG9ydDogc3RyaW5nO1xuICAgICAgICBuYXJyb3c6IHN0cmluZztcbiAgICB9W107XG4gICAgcHJpdmF0ZSBfZGF5cztcbiAgICByZWFkb25seSBkYXlzOiBDYWxlbmRhckNlbGxbXVtdO1xuICAgIHJlYWRvbmx5IGFjdGl2ZUNlbGw6IG51bWJlcjtcbiAgICByZWFkb25seSBpc0luU2luZ2xlTW9kZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc0luUmFuZ2VNb2RlOiBib29sZWFuO1xuICAgIHByaXZhdGUgZmlyc3REYXRlT2ZNb250aDtcbiAgICBwcml2YXRlIGxvY2FsZVN1YjtcbiAgICBwcml2YXRlIGluaXRpYXRlZDtcbiAgICBwcml2YXRlIGRhdGVOYW1lcztcbiAgICB0b2RheURhdGU6IG51bWJlciB8IG51bGw7XG4gICAgc2VsZWN0ZWREYXRlczogbnVtYmVyW107XG4gICAgZmlyc3RSb3dPZmZzZXQ6IG51bWJlcjtcbiAgICByZWFkb25seSBzZWxlY3RlZENoYW5nZTogRXZlbnRFbWl0dGVyPFQ+O1xuICAgIHJlYWRvbmx5IHVzZXJTZWxlY3Rpb246IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICByZWFkb25seSBwaWNrZXJNb21lbnRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxUPjtcbiAgICBjYWxlbmRhckJvZHlFbG06IE93bENhbGVuZGFyQm9keUNvbXBvbmVudDtcbiAgICByZWFkb25seSBvd2xEVENhbGVuZGFyVmlldzogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihjZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGRhdGVUaW1lQWRhcHRlcjogRGF0ZVRpbWVBZGFwdGVyPFQ+LCBkYXRlVGltZUZvcm1hdHM6IE93bERhdGVUaW1lRm9ybWF0cyk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHNlbGVjdENhbGVuZGFyQ2VsbChjZWxsOiBDYWxlbmRhckNlbGwpOiB2b2lkO1xuICAgIHByaXZhdGUgc2VsZWN0RGF0ZTtcbiAgICBoYW5kbGVDYWxlbmRhcktleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIHByaXZhdGUgZ2VuZXJhdGVXZWVrRGF5cztcbiAgICBwcml2YXRlIGdlbmVyYXRlQ2FsZW5kYXI7XG4gICAgcHJpdmF0ZSBjcmVhdGVEYXRlQ2VsbDtcbiAgICBwcml2YXRlIGlzRGF0ZUVuYWJsZWQ7XG4gICAgcHJpdmF0ZSBnZXRWYWxpZERhdGU7XG4gICAgaXNTYW1lTW9udGgoZGF0ZUxlZnQ6IFQsIGRhdGVSaWdodDogVCk6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBzZXRTZWxlY3RlZERhdGVzO1xuICAgIHByaXZhdGUgZm9jdXNBY3RpdmVDZWxsO1xufVxuIl19