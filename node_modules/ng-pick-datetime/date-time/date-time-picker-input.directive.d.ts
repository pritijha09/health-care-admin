import { AfterContentInit, ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { OwlDateTimeComponent } from './date-time-picker.component';
import { DateTimeAdapter } from './adapter/date-time-adapter.class';
import { OwlDateTimeFormats } from './adapter/date-time-format.class';
import { SelectMode } from './date-time.class';
import * as ɵngcc0 from '@angular/core';
export declare const OWL_DATETIME_VALUE_ACCESSOR: any;
export declare const OWL_DATETIME_VALIDATORS: any;
export declare class OwlDateTimeInputDirective<T> implements OnInit, AfterContentInit, OnDestroy, ControlValueAccessor, Validator {
    private elmRef;
    private renderer;
    private dateTimeAdapter;
    private dateTimeFormats;
    owlDateTime: OwlDateTimeComponent<T>;
    owlDateTimeFilter: (date: T | null) => boolean;
    private _dateTimeFilter;
    readonly dateTimeFilter: (date: T) => boolean;
    private _disabled;
    disabled: boolean;
    private _min;
    min: T | null;
    private _max;
    max: T | null;
    private _selectMode;
    selectMode: SelectMode;
    rangeSeparator: string;
    private _value;
    value: T | null;
    private _values;
    values: T[];
    dateTimeChange: EventEmitter<any>;
    dateTimeInput: EventEmitter<any>;
    readonly elementRef: ElementRef;
    readonly isInSingleMode: boolean;
    readonly isInRangeMode: boolean;
    dtPicker: OwlDateTimeComponent<T>;
    private dtPickerSub;
    private localeSub;
    private lastValueValid;
    private onModelChange;
    private onModelTouched;
    private validatorOnChange;
    private parseValidator;
    private minValidator;
    private maxValidator;
    private filterValidator;
    private rangeValidator;
    private validator;
    valueChange: EventEmitter<T | T[]>;
    disabledChange: EventEmitter<boolean>;
    readonly owlDateTimeInputAriaHaspopup: boolean;
    readonly owlDateTimeInputAriaOwns: string;
    readonly minIso8601: string;
    readonly maxIso8601: string;
    readonly owlDateTimeInputDisabled: boolean;
    constructor(elmRef: ElementRef, renderer: Renderer2, dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    validate(c: AbstractControl): {
        [key: string]: any;
    };
    registerOnValidatorChange(fn: () => void): void;
    handleKeydownOnHost(event: KeyboardEvent): void;
    handleBlurOnHost(event: Event): void;
    handleInputOnHost(event: any): void;
    handleChangeOnHost(event: any): void;
    formatNativeInputValue(): void;
    private registerDateTimePicker;
    private getValidDate;
    private convertTimeStringToDateTimeString;
    private changeInputInSingleMode;
    private changeInputInRangeFromToMode;
    private changeInputInRangeMode;
    private isSameValue;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlDateTimeInputDirective<any>, [null, null, { optional: true; }, { optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<OwlDateTimeInputDirective<any>, "input[owlDateTime]", ["owlDateTimeInput"], { "rangeSeparator": "rangeSeparator"; "owlDateTime": "owlDateTime"; "owlDateTimeFilter": "owlDateTimeFilter"; "min": "min"; "max": "max"; "selectMode": "selectMode"; "value": "value"; "values": "values"; "_disabled": "_disabled"; }, { "dateTimeChange": "dateTimeChange"; "dateTimeInput": "dateTimeInput"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS10aW1lLXBpY2tlci1pbnB1dC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiZGF0ZS10aW1lLXBpY2tlci1pbnB1dC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBPd2xEYXRlVGltZUNvbXBvbmVudCB9IGZyb20gJy4vZGF0ZS10aW1lLXBpY2tlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGF0ZVRpbWVBZGFwdGVyIH0gZnJvbSAnLi9hZGFwdGVyL2RhdGUtdGltZS1hZGFwdGVyLmNsYXNzJztcbmltcG9ydCB7IE93bERhdGVUaW1lRm9ybWF0cyB9IGZyb20gJy4vYWRhcHRlci9kYXRlLXRpbWUtZm9ybWF0LmNsYXNzJztcbmltcG9ydCB7IFNlbGVjdE1vZGUgfSBmcm9tICcuL2RhdGUtdGltZS5jbGFzcyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBPV0xfREFURVRJTUVfVkFMVUVfQUNDRVNTT1I6IGFueTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IE9XTF9EQVRFVElNRV9WQUxJREFUT1JTOiBhbnk7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBPd2xEYXRlVGltZUlucHV0RGlyZWN0aXZlPFQ+IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBWYWxpZGF0b3Ige1xuICAgIHByaXZhdGUgZWxtUmVmO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBkYXRlVGltZUFkYXB0ZXI7XG4gICAgcHJpdmF0ZSBkYXRlVGltZUZvcm1hdHM7XG4gICAgb3dsRGF0ZVRpbWU6IE93bERhdGVUaW1lQ29tcG9uZW50PFQ+O1xuICAgIG93bERhdGVUaW1lRmlsdGVyOiAoZGF0ZTogVCB8IG51bGwpID0+IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfZGF0ZVRpbWVGaWx0ZXI7XG4gICAgcmVhZG9ubHkgZGF0ZVRpbWVGaWx0ZXI6IChkYXRlOiBUKSA9PiBib29sZWFuO1xuICAgIHByaXZhdGUgX2Rpc2FibGVkO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIHByaXZhdGUgX21pbjtcbiAgICBtaW46IFQgfCBudWxsO1xuICAgIHByaXZhdGUgX21heDtcbiAgICBtYXg6IFQgfCBudWxsO1xuICAgIHByaXZhdGUgX3NlbGVjdE1vZGU7XG4gICAgc2VsZWN0TW9kZTogU2VsZWN0TW9kZTtcbiAgICByYW5nZVNlcGFyYXRvcjogc3RyaW5nO1xuICAgIHByaXZhdGUgX3ZhbHVlO1xuICAgIHZhbHVlOiBUIHwgbnVsbDtcbiAgICBwcml2YXRlIF92YWx1ZXM7XG4gICAgdmFsdWVzOiBUW107XG4gICAgZGF0ZVRpbWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGRhdGVUaW1lSW5wdXQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG4gICAgcmVhZG9ubHkgaXNJblNpbmdsZU1vZGU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNJblJhbmdlTW9kZTogYm9vbGVhbjtcbiAgICBkdFBpY2tlcjogT3dsRGF0ZVRpbWVDb21wb25lbnQ8VD47XG4gICAgcHJpdmF0ZSBkdFBpY2tlclN1YjtcbiAgICBwcml2YXRlIGxvY2FsZVN1YjtcbiAgICBwcml2YXRlIGxhc3RWYWx1ZVZhbGlkO1xuICAgIHByaXZhdGUgb25Nb2RlbENoYW5nZTtcbiAgICBwcml2YXRlIG9uTW9kZWxUb3VjaGVkO1xuICAgIHByaXZhdGUgdmFsaWRhdG9yT25DaGFuZ2U7XG4gICAgcHJpdmF0ZSBwYXJzZVZhbGlkYXRvcjtcbiAgICBwcml2YXRlIG1pblZhbGlkYXRvcjtcbiAgICBwcml2YXRlIG1heFZhbGlkYXRvcjtcbiAgICBwcml2YXRlIGZpbHRlclZhbGlkYXRvcjtcbiAgICBwcml2YXRlIHJhbmdlVmFsaWRhdG9yO1xuICAgIHByaXZhdGUgdmFsaWRhdG9yO1xuICAgIHZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8VCB8IFRbXT47XG4gICAgZGlzYWJsZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICByZWFkb25seSBvd2xEYXRlVGltZUlucHV0QXJpYUhhc3BvcHVwOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IG93bERhdGVUaW1lSW5wdXRBcmlhT3duczogc3RyaW5nO1xuICAgIHJlYWRvbmx5IG1pbklzbzg2MDE6IHN0cmluZztcbiAgICByZWFkb25seSBtYXhJc284NjAxOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgb3dsRGF0ZVRpbWVJbnB1dERpc2FibGVkOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGVsbVJlZjogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgZGF0ZVRpbWVBZGFwdGVyOiBEYXRlVGltZUFkYXB0ZXI8VD4sIGRhdGVUaW1lRm9ybWF0czogT3dsRGF0ZVRpbWVGb3JtYXRzKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgdmFsaWRhdGUoYzogQWJzdHJhY3RDb250cm9sKToge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gICAgfTtcbiAgICByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZuOiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICBoYW5kbGVLZXlkb3duT25Ib3N0KGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBoYW5kbGVCbHVyT25Ib3N0KGV2ZW50OiBFdmVudCk6IHZvaWQ7XG4gICAgaGFuZGxlSW5wdXRPbkhvc3QoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgaGFuZGxlQ2hhbmdlT25Ib3N0KGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGZvcm1hdE5hdGl2ZUlucHV0VmFsdWUoKTogdm9pZDtcbiAgICBwcml2YXRlIHJlZ2lzdGVyRGF0ZVRpbWVQaWNrZXI7XG4gICAgcHJpdmF0ZSBnZXRWYWxpZERhdGU7XG4gICAgcHJpdmF0ZSBjb252ZXJ0VGltZVN0cmluZ1RvRGF0ZVRpbWVTdHJpbmc7XG4gICAgcHJpdmF0ZSBjaGFuZ2VJbnB1dEluU2luZ2xlTW9kZTtcbiAgICBwcml2YXRlIGNoYW5nZUlucHV0SW5SYW5nZUZyb21Ub01vZGU7XG4gICAgcHJpdmF0ZSBjaGFuZ2VJbnB1dEluUmFuZ2VNb2RlO1xuICAgIHByaXZhdGUgaXNTYW1lVmFsdWU7XG59XG4iXX0=