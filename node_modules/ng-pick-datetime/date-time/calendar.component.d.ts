import { AfterContentInit, AfterViewChecked, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit } from '@angular/core';
import { OwlDateTimeIntl } from './date-time-picker-intl.service';
import { DateTimeAdapter } from './adapter/date-time-adapter.class';
import { OwlDateTimeFormats } from './adapter/date-time-format.class';
import { SelectMode } from './date-time.class';
import * as ɵngcc0 from '@angular/core';
export declare class OwlCalendarComponent<T> implements OnInit, AfterContentInit, AfterViewChecked, OnDestroy {
    private elmRef;
    private pickerIntl;
    private ngZone;
    private cdRef;
    private dateTimeAdapter;
    private dateTimeFormats;
    dateFilter: Function;
    firstDayOfWeek: number;
    private _minDate;
    minDate: T | null;
    private _maxDate;
    maxDate: T | null;
    private _pickerMoment;
    pickerMoment: T;
    selectMode: SelectMode;
    private _selected;
    selected: T | null;
    private _selecteds;
    selecteds: T[];
    startView: 'month' | 'year' | 'multi-years';
    hideOtherMonths: boolean;
    pickerMomentChange: EventEmitter<T>;
    selectedChange: EventEmitter<T>;
    userSelection: EventEmitter<void>;
    readonly yearSelected: EventEmitter<T>;
    readonly monthSelected: EventEmitter<T>;
    readonly periodButtonText: string;
    readonly periodButtonLabel: string;
    readonly prevButtonLabel: string;
    readonly nextButtonLabel: string;
    private _currentView;
    currentView: 'month' | 'year' | 'multi-years';
    readonly isInSingleMode: boolean;
    readonly isInRangeMode: boolean;
    readonly showControlArrows: boolean;
    readonly isMonthView: boolean;
    dateFilterForViews: (date: T) => boolean;
    readonly owlDTCalendarClass: boolean;
    private intlChangesSub;
    private moveFocusOnNextTick;
    constructor(elmRef: ElementRef, pickerIntl: OwlDateTimeIntl, ngZone: NgZone, cdRef: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    toggleViews(): void;
    previousClicked(): void;
    nextClicked(): void;
    dateSelected(date: T): void;
    goToDateInView(date: T, view: 'month' | 'year' | 'multi-years'): void;
    handlePickerMomentChange(date: T): void;
    userSelected(): void;
    prevButtonEnabled(): boolean;
    nextButtonEnabled(): boolean;
    focusActiveCell(): void;
    selectYearInMultiYearView(normalizedYear: T): void;
    selectMonthInYearView(normalizedMonth: T): void;
    private isSameView;
    private getValidDate;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlCalendarComponent<any>, [null, null, null, null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<OwlCalendarComponent<any>, "owl-date-time-calendar", ["owlDateTimeCalendar"], { "firstDayOfWeek": "firstDayOfWeek"; "startView": "startView"; "minDate": "minDate"; "maxDate": "maxDate"; "pickerMoment": "pickerMoment"; "selected": "selected"; "selecteds": "selecteds"; "dateFilter": "dateFilter"; "selectMode": "selectMode"; "hideOtherMonths": "hideOtherMonths"; }, { "pickerMomentChange": "pickerMomentChange"; "selectedChange": "selectedChange"; "userSelection": "userSelection"; "yearSelected": "yearSelected"; "monthSelected": "monthSelected"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNhbGVuZGFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0NoZWNrZWQsIENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE93bERhdGVUaW1lSW50bCB9IGZyb20gJy4vZGF0ZS10aW1lLXBpY2tlci1pbnRsLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0ZVRpbWVBZGFwdGVyIH0gZnJvbSAnLi9hZGFwdGVyL2RhdGUtdGltZS1hZGFwdGVyLmNsYXNzJztcbmltcG9ydCB7IE93bERhdGVUaW1lRm9ybWF0cyB9IGZyb20gJy4vYWRhcHRlci9kYXRlLXRpbWUtZm9ybWF0LmNsYXNzJztcbmltcG9ydCB7IFNlbGVjdE1vZGUgfSBmcm9tICcuL2RhdGUtdGltZS5jbGFzcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBPd2xDYWxlbmRhckNvbXBvbmVudDxUPiBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3Q2hlY2tlZCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGVsbVJlZjtcbiAgICBwcml2YXRlIHBpY2tlckludGw7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgcHJpdmF0ZSBjZFJlZjtcbiAgICBwcml2YXRlIGRhdGVUaW1lQWRhcHRlcjtcbiAgICBwcml2YXRlIGRhdGVUaW1lRm9ybWF0cztcbiAgICBkYXRlRmlsdGVyOiBGdW5jdGlvbjtcbiAgICBmaXJzdERheU9mV2VlazogbnVtYmVyO1xuICAgIHByaXZhdGUgX21pbkRhdGU7XG4gICAgbWluRGF0ZTogVCB8IG51bGw7XG4gICAgcHJpdmF0ZSBfbWF4RGF0ZTtcbiAgICBtYXhEYXRlOiBUIHwgbnVsbDtcbiAgICBwcml2YXRlIF9waWNrZXJNb21lbnQ7XG4gICAgcGlja2VyTW9tZW50OiBUO1xuICAgIHNlbGVjdE1vZGU6IFNlbGVjdE1vZGU7XG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWQ7XG4gICAgc2VsZWN0ZWQ6IFQgfCBudWxsO1xuICAgIHByaXZhdGUgX3NlbGVjdGVkcztcbiAgICBzZWxlY3RlZHM6IFRbXTtcbiAgICBzdGFydFZpZXc6ICdtb250aCcgfCAneWVhcicgfCAnbXVsdGkteWVhcnMnO1xuICAgIGhpZGVPdGhlck1vbnRoczogYm9vbGVhbjtcbiAgICBwaWNrZXJNb21lbnRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxUPjtcbiAgICBzZWxlY3RlZENoYW5nZTogRXZlbnRFbWl0dGVyPFQ+O1xuICAgIHVzZXJTZWxlY3Rpb246IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICByZWFkb25seSB5ZWFyU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxUPjtcbiAgICByZWFkb25seSBtb250aFNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8VD47XG4gICAgcmVhZG9ubHkgcGVyaW9kQnV0dG9uVGV4dDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHBlcmlvZEJ1dHRvbkxhYmVsOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgcHJldkJ1dHRvbkxhYmVsOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgbmV4dEJ1dHRvbkxhYmVsOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfY3VycmVudFZpZXc7XG4gICAgY3VycmVudFZpZXc6ICdtb250aCcgfCAneWVhcicgfCAnbXVsdGkteWVhcnMnO1xuICAgIHJlYWRvbmx5IGlzSW5TaW5nbGVNb2RlOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzSW5SYW5nZU1vZGU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgc2hvd0NvbnRyb2xBcnJvd3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNNb250aFZpZXc6IGJvb2xlYW47XG4gICAgZGF0ZUZpbHRlckZvclZpZXdzOiAoZGF0ZTogVCkgPT4gYm9vbGVhbjtcbiAgICByZWFkb25seSBvd2xEVENhbGVuZGFyQ2xhc3M6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBpbnRsQ2hhbmdlc1N1YjtcbiAgICBwcml2YXRlIG1vdmVGb2N1c09uTmV4dFRpY2s7XG4gICAgY29uc3RydWN0b3IoZWxtUmVmOiBFbGVtZW50UmVmLCBwaWNrZXJJbnRsOiBPd2xEYXRlVGltZUludGwsIG5nWm9uZTogTmdab25lLCBjZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGRhdGVUaW1lQWRhcHRlcjogRGF0ZVRpbWVBZGFwdGVyPFQ+LCBkYXRlVGltZUZvcm1hdHM6IE93bERhdGVUaW1lRm9ybWF0cyk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHRvZ2dsZVZpZXdzKCk6IHZvaWQ7XG4gICAgcHJldmlvdXNDbGlja2VkKCk6IHZvaWQ7XG4gICAgbmV4dENsaWNrZWQoKTogdm9pZDtcbiAgICBkYXRlU2VsZWN0ZWQoZGF0ZTogVCk6IHZvaWQ7XG4gICAgZ29Ub0RhdGVJblZpZXcoZGF0ZTogVCwgdmlldzogJ21vbnRoJyB8ICd5ZWFyJyB8ICdtdWx0aS15ZWFycycpOiB2b2lkO1xuICAgIGhhbmRsZVBpY2tlck1vbWVudENoYW5nZShkYXRlOiBUKTogdm9pZDtcbiAgICB1c2VyU2VsZWN0ZWQoKTogdm9pZDtcbiAgICBwcmV2QnV0dG9uRW5hYmxlZCgpOiBib29sZWFuO1xuICAgIG5leHRCdXR0b25FbmFibGVkKCk6IGJvb2xlYW47XG4gICAgZm9jdXNBY3RpdmVDZWxsKCk6IHZvaWQ7XG4gICAgc2VsZWN0WWVhckluTXVsdGlZZWFyVmlldyhub3JtYWxpemVkWWVhcjogVCk6IHZvaWQ7XG4gICAgc2VsZWN0TW9udGhJblllYXJWaWV3KG5vcm1hbGl6ZWRNb250aDogVCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBpc1NhbWVWaWV3O1xuICAgIHByaXZhdGUgZ2V0VmFsaWREYXRlO1xufVxuIl19