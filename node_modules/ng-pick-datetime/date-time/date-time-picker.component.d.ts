import { ChangeDetectorRef, EventEmitter, InjectionToken, NgZone, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';
import { BlockScrollStrategy, Overlay, ScrollStrategy } from '@angular/cdk/overlay';
import { OwlDateTimeInputDirective } from './date-time-picker-input.directive';
import { DateTimeAdapter } from './adapter/date-time-adapter.class';
import { OwlDateTimeFormats } from './adapter/date-time-format.class';
import { OwlDateTime, PickerMode, PickerType, SelectMode } from './date-time.class';
import { OwlDialogService } from '../dialog';
import * as ɵngcc0 from '@angular/core';
export declare const OWL_DTPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;
export declare function OWL_DTPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => BlockScrollStrategy;
export declare const OWL_DTPICKER_SCROLL_STRATEGY_PROVIDER: {
    provide: InjectionToken<() => ScrollStrategy>;
    deps: (typeof Overlay)[];
    useFactory: typeof OWL_DTPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY;
};
export declare class OwlDateTimeComponent<T> extends OwlDateTime<T> implements OnInit, OnDestroy {
    private overlay;
    private viewContainerRef;
    private dialogService;
    private ngZone;
    protected changeDetector: ChangeDetectorRef;
    protected dateTimeAdapter: DateTimeAdapter<T>;
    private defaultScrollStrategy;
    protected dateTimeFormats: OwlDateTimeFormats;
    private document;
    backdropClass: string | string[];
    panelClass: string | string[];
    private _startAt;
    startAt: T | null;
    private _pickerType;
    pickerType: PickerType;
    _pickerMode: PickerMode;
    pickerMode: PickerMode;
    private _disabled;
    disabled: boolean;
    private _opened;
    opened: boolean;
    scrollStrategy: ScrollStrategy;
    afterPickerClosed: EventEmitter<any>;
    afterPickerOpen: EventEmitter<any>;
    yearSelected: EventEmitter<T>;
    monthSelected: EventEmitter<T>;
    confirmSelectedChange: EventEmitter<T | T[]>;
    disabledChange: EventEmitter<boolean>;
    private pickerContainerPortal;
    private pickerContainer;
    private popupRef;
    private dialogRef;
    private dtInputSub;
    private hidePickerStreamSub;
    private confirmSelectedStreamSub;
    private pickerOpenedStreamSub;
    private focusedElementBeforeOpen;
    private _dtInput;
    readonly dtInput: OwlDateTimeInputDirective<T>;
    private _selected;
    selected: T | null;
    private _selecteds;
    selecteds: T[];
    readonly minDateTime: T | null;
    readonly maxDateTime: T | null;
    readonly dateTimeFilter: (date: T | null) => boolean;
    readonly selectMode: SelectMode;
    readonly isInSingleMode: boolean;
    readonly isInRangeMode: boolean;
    constructor(overlay: Overlay, viewContainerRef: ViewContainerRef, dialogService: OwlDialogService, ngZone: NgZone, changeDetector: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>, defaultScrollStrategy: () => ScrollStrategy, dateTimeFormats: OwlDateTimeFormats, document: any);
    ngOnInit(): void;
    ngOnDestroy(): void;
    registerInput(input: OwlDateTimeInputDirective<T>): void;
    open(): void;
    select(date: T[] | T): void;
    selectYear(normalizedYear: T): void;
    selectMonth(normalizedMonth: T): void;
    close(): void;
    confirmSelect(event?: any): void;
    private openAsDialog;
    private openAsPopup;
    private createPopup;
    private createPopupPositionStrategy;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlDateTimeComponent<any>, [null, null, null, null, null, { optional: true; }, null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<OwlDateTimeComponent<any>, "owl-date-time", ["owlDateTime"], { "startAt": "startAt"; "pickerType": "pickerType"; "pickerMode": "pickerMode"; "disabled": "disabled"; "opened": "opened"; "backdropClass": "backdropClass"; "panelClass": "panelClass"; "scrollStrategy": "scrollStrategy"; }, { "afterPickerClosed": "afterPickerClosed"; "afterPickerOpen": "afterPickerOpen"; "yearSelected": "yearSelected"; "monthSelected": "monthSelected"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS10aW1lLXBpY2tlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZGF0ZS10aW1lLXBpY2tlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFdmVudEVtaXR0ZXIsIEluamVjdGlvblRva2VuLCBOZ1pvbmUsIE9uRGVzdHJveSwgT25Jbml0LCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCbG9ja1Njcm9sbFN0cmF0ZWd5LCBPdmVybGF5LCBTY3JvbGxTdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IE93bERhdGVUaW1lSW5wdXREaXJlY3RpdmUgfSBmcm9tICcuL2RhdGUtdGltZS1waWNrZXItaW5wdXQuZGlyZWN0aXZlJztcbmltcG9ydCB7IERhdGVUaW1lQWRhcHRlciB9IGZyb20gJy4vYWRhcHRlci9kYXRlLXRpbWUtYWRhcHRlci5jbGFzcyc7XG5pbXBvcnQgeyBPd2xEYXRlVGltZUZvcm1hdHMgfSBmcm9tICcuL2FkYXB0ZXIvZGF0ZS10aW1lLWZvcm1hdC5jbGFzcyc7XG5pbXBvcnQgeyBPd2xEYXRlVGltZSwgUGlja2VyTW9kZSwgUGlja2VyVHlwZSwgU2VsZWN0TW9kZSB9IGZyb20gJy4vZGF0ZS10aW1lLmNsYXNzJztcbmltcG9ydCB7IE93bERpYWxvZ1NlcnZpY2UgfSBmcm9tICcuLi9kaWFsb2cnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgT1dMX0RUUElDS0VSX1NDUk9MTF9TVFJBVEVHWTogSW5qZWN0aW9uVG9rZW48KCkgPT4gU2Nyb2xsU3RyYXRlZ3k+O1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gT1dMX0RUUElDS0VSX1NDUk9MTF9TVFJBVEVHWV9QUk9WSURFUl9GQUNUT1JZKG92ZXJsYXk6IE92ZXJsYXkpOiAoKSA9PiBCbG9ja1Njcm9sbFN0cmF0ZWd5O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgT1dMX0RUUElDS0VSX1NDUk9MTF9TVFJBVEVHWV9QUk9WSURFUjoge1xuICAgIHByb3ZpZGU6IEluamVjdGlvblRva2VuPCgpID0+IFNjcm9sbFN0cmF0ZWd5PjtcbiAgICBkZXBzOiAodHlwZW9mIE92ZXJsYXkpW107XG4gICAgdXNlRmFjdG9yeTogdHlwZW9mIE9XTF9EVFBJQ0tFUl9TQ1JPTExfU1RSQVRFR1lfUFJPVklERVJfRkFDVE9SWTtcbn07XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBPd2xEYXRlVGltZUNvbXBvbmVudDxUPiBleHRlbmRzIE93bERhdGVUaW1lPFQ+IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgb3ZlcmxheTtcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY7XG4gICAgcHJpdmF0ZSBkaWFsb2dTZXJ2aWNlO1xuICAgIHByaXZhdGUgbmdab25lO1xuICAgIHByb3RlY3RlZCBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcHJvdGVjdGVkIGRhdGVUaW1lQWRhcHRlcjogRGF0ZVRpbWVBZGFwdGVyPFQ+O1xuICAgIHByaXZhdGUgZGVmYXVsdFNjcm9sbFN0cmF0ZWd5O1xuICAgIHByb3RlY3RlZCBkYXRlVGltZUZvcm1hdHM6IE93bERhdGVUaW1lRm9ybWF0cztcbiAgICBwcml2YXRlIGRvY3VtZW50O1xuICAgIGJhY2tkcm9wQ2xhc3M6IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIHBhbmVsQ2xhc3M6IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIHByaXZhdGUgX3N0YXJ0QXQ7XG4gICAgc3RhcnRBdDogVCB8IG51bGw7XG4gICAgcHJpdmF0ZSBfcGlja2VyVHlwZTtcbiAgICBwaWNrZXJUeXBlOiBQaWNrZXJUeXBlO1xuICAgIF9waWNrZXJNb2RlOiBQaWNrZXJNb2RlO1xuICAgIHBpY2tlck1vZGU6IFBpY2tlck1vZGU7XG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQ7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfb3BlbmVkO1xuICAgIG9wZW5lZDogYm9vbGVhbjtcbiAgICBzY3JvbGxTdHJhdGVneTogU2Nyb2xsU3RyYXRlZ3k7XG4gICAgYWZ0ZXJQaWNrZXJDbG9zZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGFmdGVyUGlja2VyT3BlbjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgeWVhclNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8VD47XG4gICAgbW9udGhTZWxlY3RlZDogRXZlbnRFbWl0dGVyPFQ+O1xuICAgIGNvbmZpcm1TZWxlY3RlZENoYW5nZTogRXZlbnRFbWl0dGVyPFQgfCBUW10+O1xuICAgIGRpc2FibGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgcHJpdmF0ZSBwaWNrZXJDb250YWluZXJQb3J0YWw7XG4gICAgcHJpdmF0ZSBwaWNrZXJDb250YWluZXI7XG4gICAgcHJpdmF0ZSBwb3B1cFJlZjtcbiAgICBwcml2YXRlIGRpYWxvZ1JlZjtcbiAgICBwcml2YXRlIGR0SW5wdXRTdWI7XG4gICAgcHJpdmF0ZSBoaWRlUGlja2VyU3RyZWFtU3ViO1xuICAgIHByaXZhdGUgY29uZmlybVNlbGVjdGVkU3RyZWFtU3ViO1xuICAgIHByaXZhdGUgcGlja2VyT3BlbmVkU3RyZWFtU3ViO1xuICAgIHByaXZhdGUgZm9jdXNlZEVsZW1lbnRCZWZvcmVPcGVuO1xuICAgIHByaXZhdGUgX2R0SW5wdXQ7XG4gICAgcmVhZG9ubHkgZHRJbnB1dDogT3dsRGF0ZVRpbWVJbnB1dERpcmVjdGl2ZTxUPjtcbiAgICBwcml2YXRlIF9zZWxlY3RlZDtcbiAgICBzZWxlY3RlZDogVCB8IG51bGw7XG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWRzO1xuICAgIHNlbGVjdGVkczogVFtdO1xuICAgIHJlYWRvbmx5IG1pbkRhdGVUaW1lOiBUIHwgbnVsbDtcbiAgICByZWFkb25seSBtYXhEYXRlVGltZTogVCB8IG51bGw7XG4gICAgcmVhZG9ubHkgZGF0ZVRpbWVGaWx0ZXI6IChkYXRlOiBUIHwgbnVsbCkgPT4gYm9vbGVhbjtcbiAgICByZWFkb25seSBzZWxlY3RNb2RlOiBTZWxlY3RNb2RlO1xuICAgIHJlYWRvbmx5IGlzSW5TaW5nbGVNb2RlOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzSW5SYW5nZU1vZGU6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3Iob3ZlcmxheTogT3ZlcmxheSwgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgZGlhbG9nU2VydmljZTogT3dsRGlhbG9nU2VydmljZSwgbmdab25lOiBOZ1pvbmUsIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZiwgZGF0ZVRpbWVBZGFwdGVyOiBEYXRlVGltZUFkYXB0ZXI8VD4sIGRlZmF1bHRTY3JvbGxTdHJhdGVneTogKCkgPT4gU2Nyb2xsU3RyYXRlZ3ksIGRhdGVUaW1lRm9ybWF0czogT3dsRGF0ZVRpbWVGb3JtYXRzLCBkb2N1bWVudDogYW55KTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJJbnB1dChpbnB1dDogT3dsRGF0ZVRpbWVJbnB1dERpcmVjdGl2ZTxUPik6IHZvaWQ7XG4gICAgb3BlbigpOiB2b2lkO1xuICAgIHNlbGVjdChkYXRlOiBUW10gfCBUKTogdm9pZDtcbiAgICBzZWxlY3RZZWFyKG5vcm1hbGl6ZWRZZWFyOiBUKTogdm9pZDtcbiAgICBzZWxlY3RNb250aChub3JtYWxpemVkTW9udGg6IFQpOiB2b2lkO1xuICAgIGNsb3NlKCk6IHZvaWQ7XG4gICAgY29uZmlybVNlbGVjdChldmVudD86IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBvcGVuQXNEaWFsb2c7XG4gICAgcHJpdmF0ZSBvcGVuQXNQb3B1cDtcbiAgICBwcml2YXRlIGNyZWF0ZVBvcHVwO1xuICAgIHByaXZhdGUgY3JlYXRlUG9wdXBQb3NpdGlvblN0cmF0ZWd5O1xufVxuIl19