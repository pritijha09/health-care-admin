import { Platform } from '@angular/cdk/platform';
import { DateTimeAdapter } from './date-time-adapter.class';
import * as ɵngcc0 from '@angular/core';
export declare class NativeDateTimeAdapter extends DateTimeAdapter<Date> {
    private owlDateTimeLocale;
    private readonly _clampDate;
    useUtcForDisplay: boolean;
    constructor(owlDateTimeLocale: string, platform: Platform);
    getYear(date: Date): number;
    getMonth(date: Date): number;
    getDay(date: Date): number;
    getDate(date: Date): number;
    getHours(date: Date): number;
    getMinutes(date: Date): number;
    getSeconds(date: Date): number;
    getTime(date: Date): number;
    getNumDaysInMonth(date: Date): number;
    differenceInCalendarDays(dateLeft: Date, dateRight: Date): number;
    getYearName(date: Date): string;
    getMonthNames(style: 'long' | 'short' | 'narrow'): string[];
    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];
    getDateNames(): string[];
    toIso8601(date: Date): string;
    isEqual(dateLeft: Date, dateRight: Date): boolean;
    isSameDay(dateLeft: Date, dateRight: Date): boolean;
    isValid(date: Date): boolean;
    invalid(): Date;
    isDateInstance(obj: any): boolean;
    addCalendarYears(date: Date, amount: number): Date;
    addCalendarMonths(date: Date, amount: number): Date;
    addCalendarDays(date: Date, amount: number): Date;
    setHours(date: Date, amount: number): Date;
    setMinutes(date: Date, amount: number): Date;
    setSeconds(date: Date, amount: number): Date;
    createDate(year: number, month: number, date: number, hours?: number, minutes?: number, seconds?: number): Date;
    clone(date: Date): Date;
    now(): Date;
    format(date: Date, displayFormat: any): string;
    parse(value: any, parseFormat: any): Date | null;
    deserialize(value: any): Date | null;
    private createDateWithOverflow;
    private stripDirectionalityCharacters;
    private _format;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NativeDateTimeAdapter, [{ optional: true; }, null]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NativeDateTimeAdapter>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLWRhdGUtdGltZS1hZGFwdGVyLmNsYXNzLmQudHMiLCJzb3VyY2VzIjpbIm5hdGl2ZS1kYXRlLXRpbWUtYWRhcHRlci5jbGFzcy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xuaW1wb3J0IHsgRGF0ZVRpbWVBZGFwdGVyIH0gZnJvbSAnLi9kYXRlLXRpbWUtYWRhcHRlci5jbGFzcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYXRpdmVEYXRlVGltZUFkYXB0ZXIgZXh0ZW5kcyBEYXRlVGltZUFkYXB0ZXI8RGF0ZT4ge1xuICAgIHByaXZhdGUgb3dsRGF0ZVRpbWVMb2NhbGU7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2xhbXBEYXRlO1xuICAgIHVzZVV0Y0ZvckRpc3BsYXk6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3Iob3dsRGF0ZVRpbWVMb2NhbGU6IHN0cmluZywgcGxhdGZvcm06IFBsYXRmb3JtKTtcbiAgICBnZXRZZWFyKGRhdGU6IERhdGUpOiBudW1iZXI7XG4gICAgZ2V0TW9udGgoZGF0ZTogRGF0ZSk6IG51bWJlcjtcbiAgICBnZXREYXkoZGF0ZTogRGF0ZSk6IG51bWJlcjtcbiAgICBnZXREYXRlKGRhdGU6IERhdGUpOiBudW1iZXI7XG4gICAgZ2V0SG91cnMoZGF0ZTogRGF0ZSk6IG51bWJlcjtcbiAgICBnZXRNaW51dGVzKGRhdGU6IERhdGUpOiBudW1iZXI7XG4gICAgZ2V0U2Vjb25kcyhkYXRlOiBEYXRlKTogbnVtYmVyO1xuICAgIGdldFRpbWUoZGF0ZTogRGF0ZSk6IG51bWJlcjtcbiAgICBnZXROdW1EYXlzSW5Nb250aChkYXRlOiBEYXRlKTogbnVtYmVyO1xuICAgIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhkYXRlTGVmdDogRGF0ZSwgZGF0ZVJpZ2h0OiBEYXRlKTogbnVtYmVyO1xuICAgIGdldFllYXJOYW1lKGRhdGU6IERhdGUpOiBzdHJpbmc7XG4gICAgZ2V0TW9udGhOYW1lcyhzdHlsZTogJ2xvbmcnIHwgJ3Nob3J0JyB8ICduYXJyb3cnKTogc3RyaW5nW107XG4gICAgZ2V0RGF5T2ZXZWVrTmFtZXMoc3R5bGU6ICdsb25nJyB8ICdzaG9ydCcgfCAnbmFycm93Jyk6IHN0cmluZ1tdO1xuICAgIGdldERhdGVOYW1lcygpOiBzdHJpbmdbXTtcbiAgICB0b0lzbzg2MDEoZGF0ZTogRGF0ZSk6IHN0cmluZztcbiAgICBpc0VxdWFsKGRhdGVMZWZ0OiBEYXRlLCBkYXRlUmlnaHQ6IERhdGUpOiBib29sZWFuO1xuICAgIGlzU2FtZURheShkYXRlTGVmdDogRGF0ZSwgZGF0ZVJpZ2h0OiBEYXRlKTogYm9vbGVhbjtcbiAgICBpc1ZhbGlkKGRhdGU6IERhdGUpOiBib29sZWFuO1xuICAgIGludmFsaWQoKTogRGF0ZTtcbiAgICBpc0RhdGVJbnN0YW5jZShvYmo6IGFueSk6IGJvb2xlYW47XG4gICAgYWRkQ2FsZW5kYXJZZWFycyhkYXRlOiBEYXRlLCBhbW91bnQ6IG51bWJlcik6IERhdGU7XG4gICAgYWRkQ2FsZW5kYXJNb250aHMoZGF0ZTogRGF0ZSwgYW1vdW50OiBudW1iZXIpOiBEYXRlO1xuICAgIGFkZENhbGVuZGFyRGF5cyhkYXRlOiBEYXRlLCBhbW91bnQ6IG51bWJlcik6IERhdGU7XG4gICAgc2V0SG91cnMoZGF0ZTogRGF0ZSwgYW1vdW50OiBudW1iZXIpOiBEYXRlO1xuICAgIHNldE1pbnV0ZXMoZGF0ZTogRGF0ZSwgYW1vdW50OiBudW1iZXIpOiBEYXRlO1xuICAgIHNldFNlY29uZHMoZGF0ZTogRGF0ZSwgYW1vdW50OiBudW1iZXIpOiBEYXRlO1xuICAgIGNyZWF0ZURhdGUoeWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyLCBkYXRlOiBudW1iZXIsIGhvdXJzPzogbnVtYmVyLCBtaW51dGVzPzogbnVtYmVyLCBzZWNvbmRzPzogbnVtYmVyKTogRGF0ZTtcbiAgICBjbG9uZShkYXRlOiBEYXRlKTogRGF0ZTtcbiAgICBub3coKTogRGF0ZTtcbiAgICBmb3JtYXQoZGF0ZTogRGF0ZSwgZGlzcGxheUZvcm1hdDogYW55KTogc3RyaW5nO1xuICAgIHBhcnNlKHZhbHVlOiBhbnksIHBhcnNlRm9ybWF0OiBhbnkpOiBEYXRlIHwgbnVsbDtcbiAgICBkZXNlcmlhbGl6ZSh2YWx1ZTogYW55KTogRGF0ZSB8IG51bGw7XG4gICAgcHJpdmF0ZSBjcmVhdGVEYXRlV2l0aE92ZXJmbG93O1xuICAgIHByaXZhdGUgc3RyaXBEaXJlY3Rpb25hbGl0eUNoYXJhY3RlcnM7XG4gICAgcHJpdmF0ZSBfZm9ybWF0O1xufVxuIl19