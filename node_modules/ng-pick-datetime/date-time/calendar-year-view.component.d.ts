import { AfterContentInit, ChangeDetectorRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { CalendarCell, OwlCalendarBodyComponent } from './calendar-body.component';
import { DateTimeAdapter } from './adapter/date-time-adapter.class';
import { OwlDateTimeFormats } from './adapter/date-time-format.class';
import { SelectMode } from './date-time.class';
import * as ɵngcc0 from '@angular/core';
export declare class OwlYearViewComponent<T> implements OnInit, AfterContentInit, OnDestroy {
    private cdRef;
    private dateTimeAdapter;
    private dateTimeFormats;
    private _selectMode;
    selectMode: SelectMode;
    private _selected;
    selected: T | null;
    private _selecteds;
    selecteds: T[];
    private _pickerMoment;
    pickerMoment: T;
    private _dateFilter;
    dateFilter: (date: T) => boolean;
    private _minDate;
    minDate: T | null;
    private _maxDate;
    maxDate: T | null;
    private readonly monthNames;
    private _months;
    readonly months: CalendarCell[][];
    readonly activeCell: number;
    readonly isInSingleMode: boolean;
    readonly isInRangeMode: boolean;
    private localeSub;
    private initiated;
    todayMonth: number | null;
    selectedMonths: number[];
    readonly change: EventEmitter<T>;
    readonly monthSelected: EventEmitter<T>;
    readonly pickerMomentChange: EventEmitter<T>;
    readonly keyboardEnter: EventEmitter<any>;
    calendarBodyElm: OwlCalendarBodyComponent;
    readonly owlDTCalendarView: boolean;
    constructor(cdRef: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    selectCalendarCell(cell: CalendarCell): void;
    private selectMonth;
    handleCalendarKeydown(event: KeyboardEvent): void;
    private generateMonthList;
    private createMonthCell;
    private isMonthEnabled;
    private getMonthInCurrentYear;
    private setSelectedMonths;
    private hasSameYear;
    private getValidDate;
    private focusActiveCell;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlYearViewComponent<any>, [null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<OwlYearViewComponent<any>, "owl-date-time-year-view", ["owlMonthView"], { "selectMode": "selectMode"; "selected": "selected"; "selecteds": "selecteds"; "pickerMoment": "pickerMoment"; "dateFilter": "dateFilter"; "minDate": "minDate"; "maxDate": "maxDate"; }, { "change": "change"; "monthSelected": "monthSelected"; "pickerMomentChange": "pickerMomentChange"; "keyboardEnter": "keyboardEnter"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIteWVhci12aWV3LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjYWxlbmRhci15ZWFyLXZpZXcuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FsZW5kYXJDZWxsLCBPd2xDYWxlbmRhckJvZHlDb21wb25lbnQgfSBmcm9tICcuL2NhbGVuZGFyLWJvZHkuY29tcG9uZW50JztcbmltcG9ydCB7IERhdGVUaW1lQWRhcHRlciB9IGZyb20gJy4vYWRhcHRlci9kYXRlLXRpbWUtYWRhcHRlci5jbGFzcyc7XG5pbXBvcnQgeyBPd2xEYXRlVGltZUZvcm1hdHMgfSBmcm9tICcuL2FkYXB0ZXIvZGF0ZS10aW1lLWZvcm1hdC5jbGFzcyc7XG5pbXBvcnQgeyBTZWxlY3RNb2RlIH0gZnJvbSAnLi9kYXRlLXRpbWUuY2xhc3MnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgT3dsWWVhclZpZXdDb21wb25lbnQ8VD4gaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBjZFJlZjtcbiAgICBwcml2YXRlIGRhdGVUaW1lQWRhcHRlcjtcbiAgICBwcml2YXRlIGRhdGVUaW1lRm9ybWF0cztcbiAgICBwcml2YXRlIF9zZWxlY3RNb2RlO1xuICAgIHNlbGVjdE1vZGU6IFNlbGVjdE1vZGU7XG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWQ7XG4gICAgc2VsZWN0ZWQ6IFQgfCBudWxsO1xuICAgIHByaXZhdGUgX3NlbGVjdGVkcztcbiAgICBzZWxlY3RlZHM6IFRbXTtcbiAgICBwcml2YXRlIF9waWNrZXJNb21lbnQ7XG4gICAgcGlja2VyTW9tZW50OiBUO1xuICAgIHByaXZhdGUgX2RhdGVGaWx0ZXI7XG4gICAgZGF0ZUZpbHRlcjogKGRhdGU6IFQpID0+IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfbWluRGF0ZTtcbiAgICBtaW5EYXRlOiBUIHwgbnVsbDtcbiAgICBwcml2YXRlIF9tYXhEYXRlO1xuICAgIG1heERhdGU6IFQgfCBudWxsO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbW9udGhOYW1lcztcbiAgICBwcml2YXRlIF9tb250aHM7XG4gICAgcmVhZG9ubHkgbW9udGhzOiBDYWxlbmRhckNlbGxbXVtdO1xuICAgIHJlYWRvbmx5IGFjdGl2ZUNlbGw6IG51bWJlcjtcbiAgICByZWFkb25seSBpc0luU2luZ2xlTW9kZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc0luUmFuZ2VNb2RlOiBib29sZWFuO1xuICAgIHByaXZhdGUgbG9jYWxlU3ViO1xuICAgIHByaXZhdGUgaW5pdGlhdGVkO1xuICAgIHRvZGF5TW9udGg6IG51bWJlciB8IG51bGw7XG4gICAgc2VsZWN0ZWRNb250aHM6IG51bWJlcltdO1xuICAgIHJlYWRvbmx5IGNoYW5nZTogRXZlbnRFbWl0dGVyPFQ+O1xuICAgIHJlYWRvbmx5IG1vbnRoU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxUPjtcbiAgICByZWFkb25seSBwaWNrZXJNb21lbnRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxUPjtcbiAgICByZWFkb25seSBrZXlib2FyZEVudGVyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjYWxlbmRhckJvZHlFbG06IE93bENhbGVuZGFyQm9keUNvbXBvbmVudDtcbiAgICByZWFkb25seSBvd2xEVENhbGVuZGFyVmlldzogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihjZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGRhdGVUaW1lQWRhcHRlcjogRGF0ZVRpbWVBZGFwdGVyPFQ+LCBkYXRlVGltZUZvcm1hdHM6IE93bERhdGVUaW1lRm9ybWF0cyk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHNlbGVjdENhbGVuZGFyQ2VsbChjZWxsOiBDYWxlbmRhckNlbGwpOiB2b2lkO1xuICAgIHByaXZhdGUgc2VsZWN0TW9udGg7XG4gICAgaGFuZGxlQ2FsZW5kYXJLZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBwcml2YXRlIGdlbmVyYXRlTW9udGhMaXN0O1xuICAgIHByaXZhdGUgY3JlYXRlTW9udGhDZWxsO1xuICAgIHByaXZhdGUgaXNNb250aEVuYWJsZWQ7XG4gICAgcHJpdmF0ZSBnZXRNb250aEluQ3VycmVudFllYXI7XG4gICAgcHJpdmF0ZSBzZXRTZWxlY3RlZE1vbnRocztcbiAgICBwcml2YXRlIGhhc1NhbWVZZWFyO1xuICAgIHByaXZhdGUgZ2V0VmFsaWREYXRlO1xuICAgIHByaXZhdGUgZm9jdXNBY3RpdmVDZWxsO1xufVxuIl19