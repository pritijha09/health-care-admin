import { EventEmitter } from '@angular/core';
import { DateTimeAdapter } from './adapter/date-time-adapter.class';
import { OwlDateTimeFormats } from './adapter/date-time-format.class';
import * as ɵngcc0 from '@angular/core';
export declare type PickerType = 'both' | 'calendar' | 'timer';
export declare type PickerMode = 'popup' | 'dialog' | 'inline';
export declare type SelectMode = 'single' | 'range' | 'rangeFrom' | 'rangeTo';
export declare abstract class OwlDateTime<T> {
    protected dateTimeAdapter: DateTimeAdapter<T>;
    protected dateTimeFormats: OwlDateTimeFormats;
    private _showSecondsTimer;
    showSecondsTimer: boolean;
    private _hour12Timer;
    hour12Timer: boolean;
    startView: 'month' | 'year' | 'multi-years';
    private _stepHour;
    stepHour: number;
    private _stepMinute;
    stepMinute: number;
    private _stepSecond;
    stepSecond: number;
    private _firstDayOfWeek;
    firstDayOfWeek: number;
    private _hideOtherMonths;
    hideOtherMonths: boolean;
    private _id;
    readonly id: string;
    abstract readonly selected: T | null;
    abstract readonly selecteds: T[] | null;
    abstract readonly dateTimeFilter: (date: T | null) => boolean;
    abstract readonly maxDateTime: T | null;
    abstract readonly minDateTime: T | null;
    abstract readonly selectMode: SelectMode;
    abstract readonly startAt: T | null;
    abstract readonly opened: boolean;
    abstract readonly pickerMode: PickerMode;
    abstract readonly pickerType: PickerType;
    abstract readonly isInSingleMode: boolean;
    abstract readonly isInRangeMode: boolean;
    abstract select(date: T | T[]): void;
    abstract yearSelected: EventEmitter<T>;
    abstract monthSelected: EventEmitter<T>;
    abstract selectYear(normalizedYear: T): void;
    abstract selectMonth(normalizedMonth: T): void;
    readonly formatString: string;
    dateTimeChecker: (dateTime: T) => boolean;
    readonly disabled: boolean;
    constructor(dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);
    protected getValidDate(obj: any): T | null;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlDateTime<any>, [{ optional: true; }, { optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<OwlDateTime<any>, never, never, { "startView": "startView"; "showSecondsTimer": "showSecondsTimer"; "hour12Timer": "hour12Timer"; "stepHour": "stepHour"; "stepMinute": "stepMinute"; "stepSecond": "stepSecond"; "firstDayOfWeek": "firstDayOfWeek"; "hideOtherMonths": "hideOtherMonths"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS10aW1lLmNsYXNzLmQudHMiLCJzb3VyY2VzIjpbImRhdGUtdGltZS5jbGFzcy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRlVGltZUFkYXB0ZXIgfSBmcm9tICcuL2FkYXB0ZXIvZGF0ZS10aW1lLWFkYXB0ZXIuY2xhc3MnO1xuaW1wb3J0IHsgT3dsRGF0ZVRpbWVGb3JtYXRzIH0gZnJvbSAnLi9hZGFwdGVyL2RhdGUtdGltZS1mb3JtYXQuY2xhc3MnO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBQaWNrZXJUeXBlID0gJ2JvdGgnIHwgJ2NhbGVuZGFyJyB8ICd0aW1lcic7XG5leHBvcnQgZGVjbGFyZSB0eXBlIFBpY2tlck1vZGUgPSAncG9wdXAnIHwgJ2RpYWxvZycgfCAnaW5saW5lJztcbmV4cG9ydCBkZWNsYXJlIHR5cGUgU2VsZWN0TW9kZSA9ICdzaW5nbGUnIHwgJ3JhbmdlJyB8ICdyYW5nZUZyb20nIHwgJ3JhbmdlVG8nO1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgT3dsRGF0ZVRpbWU8VD4ge1xuICAgIHByb3RlY3RlZCBkYXRlVGltZUFkYXB0ZXI6IERhdGVUaW1lQWRhcHRlcjxUPjtcbiAgICBwcm90ZWN0ZWQgZGF0ZVRpbWVGb3JtYXRzOiBPd2xEYXRlVGltZUZvcm1hdHM7XG4gICAgcHJpdmF0ZSBfc2hvd1NlY29uZHNUaW1lcjtcbiAgICBzaG93U2Vjb25kc1RpbWVyOiBib29sZWFuO1xuICAgIHByaXZhdGUgX2hvdXIxMlRpbWVyO1xuICAgIGhvdXIxMlRpbWVyOiBib29sZWFuO1xuICAgIHN0YXJ0VmlldzogJ21vbnRoJyB8ICd5ZWFyJyB8ICdtdWx0aS15ZWFycyc7XG4gICAgcHJpdmF0ZSBfc3RlcEhvdXI7XG4gICAgc3RlcEhvdXI6IG51bWJlcjtcbiAgICBwcml2YXRlIF9zdGVwTWludXRlO1xuICAgIHN0ZXBNaW51dGU6IG51bWJlcjtcbiAgICBwcml2YXRlIF9zdGVwU2Vjb25kO1xuICAgIHN0ZXBTZWNvbmQ6IG51bWJlcjtcbiAgICBwcml2YXRlIF9maXJzdERheU9mV2VlaztcbiAgICBmaXJzdERheU9mV2VlazogbnVtYmVyO1xuICAgIHByaXZhdGUgX2hpZGVPdGhlck1vbnRocztcbiAgICBoaWRlT3RoZXJNb250aHM6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfaWQ7XG4gICAgcmVhZG9ubHkgaWQ6IHN0cmluZztcbiAgICBhYnN0cmFjdCByZWFkb25seSBzZWxlY3RlZDogVCB8IG51bGw7XG4gICAgYWJzdHJhY3QgcmVhZG9ubHkgc2VsZWN0ZWRzOiBUW10gfCBudWxsO1xuICAgIGFic3RyYWN0IHJlYWRvbmx5IGRhdGVUaW1lRmlsdGVyOiAoZGF0ZTogVCB8IG51bGwpID0+IGJvb2xlYW47XG4gICAgYWJzdHJhY3QgcmVhZG9ubHkgbWF4RGF0ZVRpbWU6IFQgfCBudWxsO1xuICAgIGFic3RyYWN0IHJlYWRvbmx5IG1pbkRhdGVUaW1lOiBUIHwgbnVsbDtcbiAgICBhYnN0cmFjdCByZWFkb25seSBzZWxlY3RNb2RlOiBTZWxlY3RNb2RlO1xuICAgIGFic3RyYWN0IHJlYWRvbmx5IHN0YXJ0QXQ6IFQgfCBudWxsO1xuICAgIGFic3RyYWN0IHJlYWRvbmx5IG9wZW5lZDogYm9vbGVhbjtcbiAgICBhYnN0cmFjdCByZWFkb25seSBwaWNrZXJNb2RlOiBQaWNrZXJNb2RlO1xuICAgIGFic3RyYWN0IHJlYWRvbmx5IHBpY2tlclR5cGU6IFBpY2tlclR5cGU7XG4gICAgYWJzdHJhY3QgcmVhZG9ubHkgaXNJblNpbmdsZU1vZGU6IGJvb2xlYW47XG4gICAgYWJzdHJhY3QgcmVhZG9ubHkgaXNJblJhbmdlTW9kZTogYm9vbGVhbjtcbiAgICBhYnN0cmFjdCBzZWxlY3QoZGF0ZTogVCB8IFRbXSk6IHZvaWQ7XG4gICAgYWJzdHJhY3QgeWVhclNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8VD47XG4gICAgYWJzdHJhY3QgbW9udGhTZWxlY3RlZDogRXZlbnRFbWl0dGVyPFQ+O1xuICAgIGFic3RyYWN0IHNlbGVjdFllYXIobm9ybWFsaXplZFllYXI6IFQpOiB2b2lkO1xuICAgIGFic3RyYWN0IHNlbGVjdE1vbnRoKG5vcm1hbGl6ZWRNb250aDogVCk6IHZvaWQ7XG4gICAgcmVhZG9ubHkgZm9ybWF0U3RyaW5nOiBzdHJpbmc7XG4gICAgZGF0ZVRpbWVDaGVja2VyOiAoZGF0ZVRpbWU6IFQpID0+IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoZGF0ZVRpbWVBZGFwdGVyOiBEYXRlVGltZUFkYXB0ZXI8VD4sIGRhdGVUaW1lRm9ybWF0czogT3dsRGF0ZVRpbWVGb3JtYXRzKTtcbiAgICBwcm90ZWN0ZWQgZ2V0VmFsaWREYXRlKG9iajogYW55KTogVCB8IG51bGw7XG59XG4iXX0=