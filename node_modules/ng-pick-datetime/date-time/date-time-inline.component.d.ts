import { ChangeDetectorRef, EventEmitter, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { OwlDateTime, PickerMode, PickerType, SelectMode } from './date-time.class';
import { DateTimeAdapter } from './adapter/date-time-adapter.class';
import { OwlDateTimeFormats } from './adapter/date-time-format.class';
import { OwlDateTimeContainerComponent } from './date-time-picker-container.component';
import * as ɵngcc0 from '@angular/core';
export declare const OWL_DATETIME_VALUE_ACCESSOR: any;
export declare class OwlDateTimeInlineComponent<T> extends OwlDateTime<T> implements OnInit, ControlValueAccessor {
    protected changeDetector: ChangeDetectorRef;
    protected dateTimeAdapter: DateTimeAdapter<T>;
    protected dateTimeFormats: OwlDateTimeFormats;
    container: OwlDateTimeContainerComponent<T>;
    private _pickerType;
    pickerType: PickerType;
    private _disabled;
    disabled: boolean;
    private _selectMode;
    selectMode: SelectMode;
    private _startAt;
    startAt: T | null;
    private _dateTimeFilter;
    dateTimeFilter: (date: T | null) => boolean;
    private _min;
    minDateTime: T | null;
    private _max;
    maxDateTime: T | null;
    private _value;
    value: T | null;
    private _values;
    values: T[];
    yearSelected: EventEmitter<T>;
    monthSelected: EventEmitter<T>;
    private _selected;
    selected: T | null;
    private _selecteds;
    selecteds: T[];
    readonly opened: boolean;
    readonly pickerMode: PickerMode;
    readonly isInSingleMode: boolean;
    readonly isInRangeMode: boolean;
    readonly owlDTInlineClass: boolean;
    private onModelChange;
    private onModelTouched;
    constructor(changeDetector: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);
    ngOnInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    select(date: T[] | T): void;
    selectYear(normalizedYear: T): void;
    selectMonth(normalizedMonth: T): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlDateTimeInlineComponent<any>, [null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<OwlDateTimeInlineComponent<any>, "owl-date-time-inline", never, { "pickerType": "pickerType"; "disabled": "disabled"; "selectMode": "selectMode"; "startAt": "startAt"; "dateTimeFilter": "owlDateTimeFilter"; "minDateTime": "min"; "maxDateTime": "max"; "value": "value"; "values": "values"; }, { "yearSelected": "yearSelected"; "monthSelected": "monthSelected"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS10aW1lLWlubGluZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZGF0ZS10aW1lLWlubGluZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE93bERhdGVUaW1lLCBQaWNrZXJNb2RlLCBQaWNrZXJUeXBlLCBTZWxlY3RNb2RlIH0gZnJvbSAnLi9kYXRlLXRpbWUuY2xhc3MnO1xuaW1wb3J0IHsgRGF0ZVRpbWVBZGFwdGVyIH0gZnJvbSAnLi9hZGFwdGVyL2RhdGUtdGltZS1hZGFwdGVyLmNsYXNzJztcbmltcG9ydCB7IE93bERhdGVUaW1lRm9ybWF0cyB9IGZyb20gJy4vYWRhcHRlci9kYXRlLXRpbWUtZm9ybWF0LmNsYXNzJztcbmltcG9ydCB7IE93bERhdGVUaW1lQ29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSAnLi9kYXRlLXRpbWUtcGlja2VyLWNvbnRhaW5lci5jb21wb25lbnQnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgT1dMX0RBVEVUSU1FX1ZBTFVFX0FDQ0VTU09SOiBhbnk7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBPd2xEYXRlVGltZUlubGluZUNvbXBvbmVudDxUPiBleHRlbmRzIE93bERhdGVUaW1lPFQ+IGltcGxlbWVudHMgT25Jbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgcHJvdGVjdGVkIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBwcm90ZWN0ZWQgZGF0ZVRpbWVBZGFwdGVyOiBEYXRlVGltZUFkYXB0ZXI8VD47XG4gICAgcHJvdGVjdGVkIGRhdGVUaW1lRm9ybWF0czogT3dsRGF0ZVRpbWVGb3JtYXRzO1xuICAgIGNvbnRhaW5lcjogT3dsRGF0ZVRpbWVDb250YWluZXJDb21wb25lbnQ8VD47XG4gICAgcHJpdmF0ZSBfcGlja2VyVHlwZTtcbiAgICBwaWNrZXJUeXBlOiBQaWNrZXJUeXBlO1xuICAgIHByaXZhdGUgX2Rpc2FibGVkO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIHByaXZhdGUgX3NlbGVjdE1vZGU7XG4gICAgc2VsZWN0TW9kZTogU2VsZWN0TW9kZTtcbiAgICBwcml2YXRlIF9zdGFydEF0O1xuICAgIHN0YXJ0QXQ6IFQgfCBudWxsO1xuICAgIHByaXZhdGUgX2RhdGVUaW1lRmlsdGVyO1xuICAgIGRhdGVUaW1lRmlsdGVyOiAoZGF0ZTogVCB8IG51bGwpID0+IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfbWluO1xuICAgIG1pbkRhdGVUaW1lOiBUIHwgbnVsbDtcbiAgICBwcml2YXRlIF9tYXg7XG4gICAgbWF4RGF0ZVRpbWU6IFQgfCBudWxsO1xuICAgIHByaXZhdGUgX3ZhbHVlO1xuICAgIHZhbHVlOiBUIHwgbnVsbDtcbiAgICBwcml2YXRlIF92YWx1ZXM7XG4gICAgdmFsdWVzOiBUW107XG4gICAgeWVhclNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8VD47XG4gICAgbW9udGhTZWxlY3RlZDogRXZlbnRFbWl0dGVyPFQ+O1xuICAgIHByaXZhdGUgX3NlbGVjdGVkO1xuICAgIHNlbGVjdGVkOiBUIHwgbnVsbDtcbiAgICBwcml2YXRlIF9zZWxlY3RlZHM7XG4gICAgc2VsZWN0ZWRzOiBUW107XG4gICAgcmVhZG9ubHkgb3BlbmVkOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHBpY2tlck1vZGU6IFBpY2tlck1vZGU7XG4gICAgcmVhZG9ubHkgaXNJblNpbmdsZU1vZGU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNJblJhbmdlTW9kZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBvd2xEVElubGluZUNsYXNzOiBib29sZWFuO1xuICAgIHByaXZhdGUgb25Nb2RlbENoYW5nZTtcbiAgICBwcml2YXRlIG9uTW9kZWxUb3VjaGVkO1xuICAgIGNvbnN0cnVjdG9yKGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZiwgZGF0ZVRpbWVBZGFwdGVyOiBEYXRlVGltZUFkYXB0ZXI8VD4sIGRhdGVUaW1lRm9ybWF0czogT3dsRGF0ZVRpbWVGb3JtYXRzKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHNlbGVjdChkYXRlOiBUW10gfCBUKTogdm9pZDtcbiAgICBzZWxlY3RZZWFyKG5vcm1hbGl6ZWRZZWFyOiBUKTogdm9pZDtcbiAgICBzZWxlY3RNb250aChub3JtYWxpemVkTW9udGg6IFQpOiB2b2lkO1xufVxuIl19