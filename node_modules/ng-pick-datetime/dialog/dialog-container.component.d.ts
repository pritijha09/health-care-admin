import { ChangeDetectorRef, ComponentRef, ElementRef, EmbeddedViewRef, EventEmitter, OnInit } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { FocusTrapFactory } from '@angular/cdk/a11y';
import { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';
import { OwlDialogConfig } from './dialog-config.class';
import * as ɵngcc0 from '@angular/core';
export declare class OwlDialogContainerComponent extends BasePortalOutlet implements OnInit {
    private changeDetector;
    private elementRef;
    private focusTrapFactory;
    private document;
    portalOutlet: CdkPortalOutlet;
    private focusTrap;
    ariaLabelledBy: string | null;
    animationStateChanged: EventEmitter<AnimationEvent>;
    isAnimating: boolean;
    private _config;
    readonly config: OwlDialogConfig;
    private state;
    private params;
    private elementFocusedBeforeDialogWasOpened;
    readonly owlDialogContainerClass: boolean;
    readonly owlDialogContainerTabIndex: number;
    readonly owlDialogContainerId: string;
    readonly owlDialogContainerRole: string;
    readonly owlDialogContainerAriaLabelledby: string;
    readonly owlDialogContainerAriaDescribedby: string;
    readonly owlDialogContainerAnimation: any;
    constructor(changeDetector: ChangeDetectorRef, elementRef: ElementRef, focusTrapFactory: FocusTrapFactory, document: any);
    ngOnInit(): void;
    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;
    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;
    setConfig(config: OwlDialogConfig): void;
    onAnimationStart(event: AnimationEvent): void;
    onAnimationDone(event: AnimationEvent): void;
    startExitAnimation(): void;
    private calculateZoomOrigin;
    private savePreviouslyFocusedElement;
    private trapFocus;
    private restoreFocus;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlDialogContainerComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<OwlDialogContainerComponent, "owl-dialog-container", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLWNvbnRhaW5lci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZGlhbG9nLWNvbnRhaW5lci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnRSZWYsIEVsZW1lbnRSZWYsIEVtYmVkZGVkVmlld1JlZiwgRXZlbnRFbWl0dGVyLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuaW1hdGlvbkV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBGb2N1c1RyYXBGYWN0b3J5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHsgQmFzZVBvcnRhbE91dGxldCwgQ2RrUG9ydGFsT3V0bGV0LCBDb21wb25lbnRQb3J0YWwsIFRlbXBsYXRlUG9ydGFsIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BvcnRhbCc7XG5pbXBvcnQgeyBPd2xEaWFsb2dDb25maWcgfSBmcm9tICcuL2RpYWxvZy1jb25maWcuY2xhc3MnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgT3dsRGlhbG9nQ29udGFpbmVyQ29tcG9uZW50IGV4dGVuZHMgQmFzZVBvcnRhbE91dGxldCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjtcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBmb2N1c1RyYXBGYWN0b3J5O1xuICAgIHByaXZhdGUgZG9jdW1lbnQ7XG4gICAgcG9ydGFsT3V0bGV0OiBDZGtQb3J0YWxPdXRsZXQ7XG4gICAgcHJpdmF0ZSBmb2N1c1RyYXA7XG4gICAgYXJpYUxhYmVsbGVkQnk6IHN0cmluZyB8IG51bGw7XG4gICAgYW5pbWF0aW9uU3RhdGVDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8QW5pbWF0aW9uRXZlbnQ+O1xuICAgIGlzQW5pbWF0aW5nOiBib29sZWFuO1xuICAgIHByaXZhdGUgX2NvbmZpZztcbiAgICByZWFkb25seSBjb25maWc6IE93bERpYWxvZ0NvbmZpZztcbiAgICBwcml2YXRlIHN0YXRlO1xuICAgIHByaXZhdGUgcGFyYW1zO1xuICAgIHByaXZhdGUgZWxlbWVudEZvY3VzZWRCZWZvcmVEaWFsb2dXYXNPcGVuZWQ7XG4gICAgcmVhZG9ubHkgb3dsRGlhbG9nQ29udGFpbmVyQ2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgb3dsRGlhbG9nQ29udGFpbmVyVGFiSW5kZXg6IG51bWJlcjtcbiAgICByZWFkb25seSBvd2xEaWFsb2dDb250YWluZXJJZDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IG93bERpYWxvZ0NvbnRhaW5lclJvbGU6IHN0cmluZztcbiAgICByZWFkb25seSBvd2xEaWFsb2dDb250YWluZXJBcmlhTGFiZWxsZWRieTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IG93bERpYWxvZ0NvbnRhaW5lckFyaWFEZXNjcmliZWRieTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IG93bERpYWxvZ0NvbnRhaW5lckFuaW1hdGlvbjogYW55O1xuICAgIGNvbnN0cnVjdG9yKGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZiwgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgZm9jdXNUcmFwRmFjdG9yeTogRm9jdXNUcmFwRmFjdG9yeSwgZG9jdW1lbnQ6IGFueSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBhdHRhY2hDb21wb25lbnRQb3J0YWw8VD4ocG9ydGFsOiBDb21wb25lbnRQb3J0YWw8VD4pOiBDb21wb25lbnRSZWY8VD47XG4gICAgYXR0YWNoVGVtcGxhdGVQb3J0YWw8Qz4ocG9ydGFsOiBUZW1wbGF0ZVBvcnRhbDxDPik6IEVtYmVkZGVkVmlld1JlZjxDPjtcbiAgICBzZXRDb25maWcoY29uZmlnOiBPd2xEaWFsb2dDb25maWcpOiB2b2lkO1xuICAgIG9uQW5pbWF0aW9uU3RhcnQoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KTogdm9pZDtcbiAgICBvbkFuaW1hdGlvbkRvbmUoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KTogdm9pZDtcbiAgICBzdGFydEV4aXRBbmltYXRpb24oKTogdm9pZDtcbiAgICBwcml2YXRlIGNhbGN1bGF0ZVpvb21PcmlnaW47XG4gICAgcHJpdmF0ZSBzYXZlUHJldmlvdXNseUZvY3VzZWRFbGVtZW50O1xuICAgIHByaXZhdGUgdHJhcEZvY3VzO1xuICAgIHByaXZhdGUgcmVzdG9yZUZvY3VzO1xufVxuIl19