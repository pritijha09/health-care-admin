(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('rxjs'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define(['@angular/core','@angular/common','exports', '@angular/core', 'rxjs', '@angular/common'], factory) :
    (global = global || self, factory(global.ng.core,global.ng.common,(global.angular = global.angular || {}, global.angular.datatables = {}), global.ng.core, global.rxjs, global.ng.common));
}(this, (function (ɵngcc0,ɵngcc1,exports, core, rxjs, common) { 'use strict';

    /**
     * @license
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/l-lin/angular-datatables/master/LICENSE
     */
    var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var DataTableDirective = /** @class */ (function () {
        function DataTableDirective(el) {
            this.el = el;
            /**
             * The DataTable option you pass to configure your table.
             */
            this.dtOptions = {};
        }
        DataTableDirective.prototype.ngOnInit = function () {
            var _this = this;
            if (this.dtTrigger) {
                this.dtTrigger.subscribe(function () {
                    _this.displayTable();
                });
            }
            else {
                this.displayTable();
            }
        };
        DataTableDirective.prototype.ngOnDestroy = function () {
            if (this.dtTrigger) {
                this.dtTrigger.unsubscribe();
            }
            if (this.dt) {
                this.dt.destroy(true);
            }
        };
        DataTableDirective.prototype.displayTable = function () {
            var _this = this;
            this.dtInstance = new Promise(function (resolve, reject) {
                Promise.resolve(_this.dtOptions).then(function (dtOptions) {
                    // Using setTimeout as a "hack" to be "part" of NgZone
                    setTimeout(function () {
                        _this.dt = $(_this.el.nativeElement).DataTable(dtOptions);
                        resolve(_this.dt);
                    });
                });
            });
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTableDirective.prototype, "dtOptions", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", rxjs.Subject)
        ], DataTableDirective.prototype, "dtTrigger", void 0);
        DataTableDirective = __decorate([ __metadata("design:paramtypes", [core.ElementRef])
        ], DataTableDirective);
DataTableDirective.ɵfac = function DataTableDirective_Factory(t) { return new (t || DataTableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
DataTableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DataTableDirective, selectors: [["", "datatable", ""]], inputs: { dtOptions: "dtOptions", dtTrigger: "dtTrigger" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableDirective, [{
        type: core.Directive,
        args: [{
                selector: '[datatable]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { dtOptions: [{
            type: core.Input
        }], dtTrigger: [{
            type: core.Input
        }] }); })();
        return DataTableDirective;
    }());

    /**
     * @license
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/l-lin/angular-datatables/master/LICENSE
     */
    var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DataTablesModule = /** @class */ (function () {
        function DataTablesModule() {
        }
        DataTablesModule_1 = DataTablesModule;
        DataTablesModule.forRoot = function () {
            return {
                ngModule: DataTablesModule_1
            };
        };
        var DataTablesModule_1;
DataTablesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DataTablesModule });
DataTablesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DataTablesModule_Factory(t) { return new (t || DataTablesModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DataTablesModule, { declarations: [DataTableDirective], imports: [ɵngcc1.CommonModule], exports: [DataTableDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTablesModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [DataTableDirective],
                exports: [DataTableDirective]
            }]
    }], function () { return []; }, null); })();
        return DataTablesModule;
    }());

    exports.DataTableDirective = DataTableDirective;
    exports.DataTablesModule = DataTablesModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,